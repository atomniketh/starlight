// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "node_modules/@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol";
import "node_modules/@openzeppelin/contracts@4.6.0/token/ERC20/extensions/ERC20Burnable.sol";
import "node_modules/@openzeppelin/contracts@4.6.0/security/Pausable.sol";
import "node_modules/@openzeppelin/contracts@4.6.0/access/Ownable.sol";

contract Wallets is ERC20, ERC20Burnable, Pausable, Ownable {
    
    constructor() ERC20("MyToken", "MTK") {}

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function mint(secret address to, secret uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(from, to, amount);
    }

    event walletCreated(address _address, string _name);

    struct WalletInfo {
        secret string walletName;
        secret address walletAddress;
    }

    WalletInfo[] public wallets;

    function getNumberWallets() public view returns (uint256) {
        return wallets.length;
    }

    function setWallet(secret address _address, string memory _name) public onlyOwner {
        wallets.push(
            WalletInfo(
                _name,
                _address
            )
        );
        emit walletCreated(_address, "Wallet Created");
    }
}
